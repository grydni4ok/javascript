<div id="app">
  <input type="text" v-on:input="changeName">
  <h1>Hello {{ name }} </h1> // Vue!
  <h1>Sum: {{ 10+60 }} </h1> // 70
  <h1>Method: {{ sayHi() }}// hi all
  <h1>If statement: {{ isOK ? 'i am OK' : 'i am not OK' }} </h1> // i am OK
  <h1>Functions: {{ string.split('').reverse().join('') }} </h1> // js код
  <h1><a v-bind:href="url"> {{ url }} </a></h1> // присваивание ссылок
  <h1 v-html="link"></h1> //вставиться ссылка на google
</div>
  
<script>		
  new Vue({
    el: '#app',
      data: {
      name: 'Vue!',
      isOK: true,
      string: 'My name is Egor',
      url: 'http://google.com',
      link: '<a href="http://google.com">google</a>'
    },
    methods: {
      sayHi: function(){
        return 'hi all' 
      },
		  changeName: function(){
			  this.name = event.target.value
			}  
    } 
  })
</script>

Вызов собитый осуществляется с помощья специального атрибута v-on/@:
  <h1 v-on:mouseover="onHover('изменен цвет', $event)">счетчик {{ counter }} </h1>
  <button v-on:click="counter++">Увеличить</button>
  все функции прописываются в methods.
  
Условия отображения блоков:
  v-if="isVisible" //если значение true, то данный елемент отобразится, если нет то елемента не будет даже в dom дереве
  v-else/v-else-if //продолжение условия
  v-show="isVisible" // если значение true, то данный елемент отобразится, если нет то елементу просто присвоят св-во display: none

Модификаторы событий 
  v-on:click:prevent="" - отменит собитые нажание на элемент
  v-on:mousemove:stop="" - отменит событие движение мыши по элементу
  
Условие выставление классов:
@click="isActive = !isActive" // при клике меняется значение true/false
:class="{'red': isActive, 'green': !isActive}" // добавляется класс либо red лиюо green в зависимости от значения атрибута isActive
:class="[{'red': isActive}, color]" // массив добавления, если значение isActive true, то добавится класс red, иначе значение 
переменной color

---------------------------------------------------------------------------------
Работа с массивами и объектами
new	Vue({
	el: '#app',
	data: {
		people: [
			'vlad',
			'george',
			'max'
		],
		peopleInfo: [
			{ name: 'vlad', age: 15 },
			{ name: 'george', age: 20 },
			{ name: 'max', age: 25 },
			{ name: 'Igor', age: 35 }
		],
		person: {
			name: 'Alex',
			age: 19
		}
	}
})

<ul>
	<li v-for="(pers, index) in people"> {{ index + 1 }} {{ pers }} </li>
</ul>

<ul>
	<li v-for="(info, index) of peopleInfo"> {{ index + 1 }} {{ info.name }} {{ info.age }} </li>
</ul>

<ul>
	<li v-for="(value, key) in person"> {{ key }} {{ value }} </li>
</ul>
---------------------------------------------------------------------
Computed (вычисленный) - позволет оптимизировать vue путем меньшего количества обращений
<h1> {{ returnResult }} </h1>
computed: {
	returnResult: function() {
		console.log('opiration');
		return this.result = this.counter > 3 ? '>3' : '<3'
	}
}

watch - позволяет наблюдать за изменением переменной, и дает возможность делать что-либо при каждом изменении

ref - референции, позволяют находить нужный нам элемент и работать с ним
<h1 ref="header"> Result</h1>
<button @click="colorHeader()">change color</button>
colorHeader: function() {
	this.$refs.header.style.color = 'green'
}

Жизненные циклы - beforeCreate -> created -> beforeMount -> mounted -> beforeDestroy -> destroyed
---------------------------------------------------------------------------------------
Vue компоненты
Vue.component('my-counter', {
	template: `
		<div style="border: 1px solid #000; padding: 20px;">
			<h1> counter: {{counter}} </h1>
			<button @click="add()">add</button>
		</div>
	`,
	data: function() {
		return {
			counter: 0
		}
	},
	methods: {
		add: function() {
			this.counter++
		}
	}
}) 
// первое значение переменной строка, по которой мы потом будем обращаться в html коде для вызова <my-counter></my-counter>
// обратить внимание на поле дата
-----------------------------------------------------------------------------




