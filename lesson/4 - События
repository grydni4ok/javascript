События мыши:
  click – происходит, когда кликнули на элемент левой кнопкой мыши
  contextmenu – происходит, когда кликнули на элемент правой кнопкой мыши
  mouseover – возникает, когда на элемент наводится мышь
  mousedown и mouseup – когда кнопку мыши нажали или отжали
  mousemove – при движении мыши
  
События на элементах управления:
  submit – посетитель отправил форму <form>
  focus – посетитель фокусируется на элементе, например нажимает на <input>
  
Клавиатурные события:
  keydown – когда посетитель нажимает клавишу
  keyup – когда посетитель отпускает клавишу
  
События документа:
  DOMContentLoaded – когда HTML загружен и обработан, DOM документа полностью построен и доступен.
  
События CSS:
  transitionend – когда CSS-анимация завершена

addEventListener и removeEventListener
  Методы addEventListener и removeEventListener являются современным способом назначить или удалить обработчик, и при этом 
  позволяют использовать сколько угодно любых обработчиков.
  
  element.addEventListener(event, handler[, options]); element.removeEventListener(event, handler[, phase]);
  event - Имя события, например "click".
  handler - Ссылка на функцию-обработчик.
  options - Дополнительный объект со свойствами:
    once: если true, тогда обработчик будет автоматически удалён после выполнения.
    capture: фаза, на которой должен сработать обработчик. Так исторически сложилось, что options может быть false/true, это тоже 
    самое, что {capture: false/true}.
    passive: если true, то указывает, что обработчик никогда не вызовет preventDefault()


elem.onclick = function(event) {}
Свойства объекта event:
  event.type - тип события, в данном случае click
  event.currentTarget - элемент, на котором сработал обработчик. 
  event.clientX / event.clientY - координаты курсора в момент клика (относительно окна)
  event.target – самый глубокий элемент, на котором произошло событие
  
  Любой обработчик может остановить событие вызовом event.stopPropagation(), но делать это не рекомендуется, так как в 
  дальнейшем это событие может понадобиться, иногда для самых неожиданных вещей.
  
События mouseover/mouseout св-во reletedTarget
  событие mouseover происходит, когда мышь появляется над элементом, а mouseout – когда уходит из него.
  relatedTarget - благодоря этому свойству, мы можем узнать, с какого элемента пришла (или на какой ушла) мышь.  
  mouseover:
    event.target - элемент, на который пришла мышь, т.е. элемент на котором возникло событие
    event.relatedTarget - элемент, с которого пришла мышь    
  mouseout:
    event.target - элемент, с которого ушла мышь, т.е. элемент на котором возникло событие
    event.relatedTarget - элемент, на который перешла мышь
  
События mouseenter и mouseleave 
  События mouseenter/mouseleave похожи на mouseover/mouseout. Они тоже срабатывают, когда курсор заходит на элемент и уходит с него, 
  но с двумя отличиями.
    1. Не учитываются переходы внутри элемента.
    2. События mouseenter/mouseleave не всплывают.
  
Событие wheel - генерируется над любым элементом при передвижении колеса мыши.
  cвойство deltaY – количество прокрученных пикселей по вертикали. Существуют также свойства deltaX и deltaZ для других 
  направлений прокрутки.
  
Onscroll - происходит, когда элемент прокручивается
  window.onscroll = function() {
    var scrolled = window.pageYOffset || document.documentElement.scrollTop;
  }
  
  
  
  
  
События mouseover/mouseout, relatedTarget
Для события mouseover:
event.target – это элемент, на который курсор перешёл.
event.relatedTarget – это элемент, с которого курсор ушёл (relatedTarget → target)
Для события mouseout наоборот:
event.target – это элемент, с которого курсор ушёл.
event.relatedTarget – это элемент, на который курсор перешёл (target → relatedTarget)

mouseenter и mouseleave - генерируются, когда курсор мыши переходит на элемент или покидает его.
Но есть и пара важных отличий:
Переходы внутри элемента, на его потомки и с них, не считаются.
События mouseenter/mouseleave не всплывают.
  
  
  
  
  
  
  
  
  
  
