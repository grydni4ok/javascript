XMLHttpRequest - дает возможность из JavaScript делать HTTP-запросы к серверу без перезагрузки страницы.

xhr.open(method, URL, async, user, password)
  method – HTTP-метод. Как правило, используется GET либо POST, хотя доступны и более экзотические, вроде TRACE/DELETE/PUT и т.п.
  URL – адрес запроса. Можно использовать не только http/https, но и другие протоколы, например ftp:// и file://
  async – если установлено в false, то запрос производится синхронно, если true – асинхронно
  user, password – логин и пароль для HTTP-авторизации, если нужны
  
xhr.send([body]) - Именно этод метод открывает соединение и отправляет запрос на сервер.
  В body находится тело запроса. Не у всякого запроса есть тело, например у GET-запросов тела нет, а у POST – основные данные как раз 
  передаются через body.
  
xhr.abort() - прерывает выполнение запроса

Ответ сервера: status, statusText, responseText
  status - HTTP-код ответа: 200, 404, 403 и так далее. Может быть также равен 0, если сервер не ответил или при запросе на другой домен.
  statusText - Текстовое описание статуса от сервера: OK, Not Found, Forbidden и так далее
  responseText - Текст ответа сервера
  
readystatechange - событие происходит несколько раз в процессе отсылки и получения ответа. При этом можно посмотреть «текущее состояние 
запроса» в свойстве xhr.readyState
  
JSON.parse(xhr.responseText)

var xhr = new XMLHttpRequest();
xhr.open('GET', 'phones.json', true);
xhr.send();
xhr.onreadystatechange = function() {
  if (xhr.readyState != 4) return;
  if (xhr.status != 200) {
    alert(xhr.status + ': ' + xhr.statusText);
  } else {
    alert(xhr.responseText);
  }
}

HTTP-заголовки
XMLHttpRequest умеет как указывать свои заголовки в запросе, так и читать присланные в ответ.
Для работы с HTTP-заголовками есть 3 метода:
  1. setRequestHeader(name, value) - Устанавливает заголовок name запроса со значением value 
     xhr.setRequestHeader('Content-Type', 'application/json');
  2. getResponseHeader(name) - Возвращает значение заголовка ответа name, кроме Set-Cookie и Set-Cookie2
     xhr.getResponseHeader('Content-Type')
  3. getAllResponseHeaders() - Возвращает все заголовки ответа, кроме Set-Cookie и Set-Cookie2

Таймаут
  Максимальную продолжительность асинхронного запроса можно задать свойством timeout
  xhr.timeout = 30000; // 30 секунд (в миллисекундах)
  При превышении этого времени запрос будет оборван и сгенерировано событие ontimeout:
  xhr.ontimeout = function() {
    alert( 'Извините, запрос превысил максимальное время' );
  }
  
Современная спецификация предусматривает следующие события по ходу обработки запроса:
  loadstart – запрос начат.
  progress – браузер получил очередной пакет данных, можно прочитать текущие полученные данные в responseText
  abort – запрос был отменён вызовом xhr.abort()
  error – произошла ошибка
  load – запрос был успешно (без ошибок) завершён
  timeout – запрос был прекращён по таймауту
  loadend – запрос был завершён (успешно или неуспешно)

accept используются два объекта:
  req – объект запроса («request»), то есть то, что прислал клиент (обычно браузер), из него читаем данные
  res – объект ответа («response»), в него пишем данные в ответ клиенту
    вызов res.writeHead(HTTP-код, [строка статуса], {заголовки}) пишет заголовки
    вызов res.write(txt) пишет текст в ответ
    вызов res.end(txt) – завершает запрос ответом
