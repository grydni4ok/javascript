СТРОКИ
Свойство length содержит длину строки

Получить символ, который занимает позицию pos, можно с помощью квадратных скобок: [pos]. 
Также можно использовать метод charAt: str.charAt(pos). Первый символ занимает нулевую позицию
  // получаем первый символ
  alert( str[0] ); // H
  alert( str.charAt(0) ); // H

  // получаем последний символ
  alert( str[str.length - 1] ); // o
  
Методы toLowerCase() и toUpperCase() меняют регистр символов

Поиск подстроки
str.indexOf(substr, pos) - ищет подстроку substr в строке str, начиная с позиции pos, и возвращает позицию, 
на которой располагается совпадение, либо -1 при отсутствии совпадений
Более современный метод str.includes(substr, pos) возвращает true, если в строке str есть подстрока substr, либо false, если нет.

Получение подстроки
str.slice(start [, end]) - Возвращает часть строки от start до (не включая) end
  let str = "stringify";
  // 'strin', символы от 0 до 5 (не включая 5)

str.localeCompare(str2) возвращает число, которое показывает, какая строка больше в соответствии с правилами языка:
  Отрицательное число, если str меньше str2.
  Положительное число, если str больше str2.
  0, если строки равны.




МАССИВЫ
let arr = [];
pop - Удаляет последний элемент из массива и возвращает его
push - Добавляет элемент в конец массива
shift - Удаляет из массива первый элемент и возвращает его
unshift - Добавляет элемент в начало массива

Перебор элементов
for (let i = 0; i < arr.length; i++) {
  alert( arr[i] );
}

Проходит по значениям
for (let fruit of fruits) {
  alert( fruit );
}

arr.splice(index[, deleteCount, elem1, ..., elemN]) - Он начинает с позиции index, удаляет deleteCount элементов и вставляет 
elem1, ..., elemN на их место. Возвращает массив из удалённых элементов.

arr.slice([start], [end]) -Он возвращает новый массив, в который копирует элементы, начиная с индекса start и до end (не включая end). 
Оба индекса start и end могут быть отрицательными. В таком случае отсчёт будет осуществляться с конца массива.

arr.concat(arg1, arg2...) - возвращает новый массив: копирует все члены текущего массива и добавляет к нему items. Если какой-то из 
items является массивом, тогда берутся его элементы.

forEach - позволяет запускать функцию для каждого элемента массива
  arr.forEach(function(item, index, array) {
    // ... делать что-то с item
  });

arr.indexOf(item, from) ищет item, начиная с индекса from, и возвращает индекс, на котором был найден искомый элемент, 
в противном случае -1
arr.lastIndexOf(item, from) – то же самое, но ищет справа налево
arr.includes(item, from) – ищет item, начиная с индекса from, и возвращает true, если поиск успешен

find и findIndex
  let result = arr.find(function(item, index, array) {
    // если true - возвращается текущий элемент и перебор прерывается
    // если все итерации оказались ложными, возвращается undefined
  });
Если функция возвращает true, поиск прерывается и возвращается item. Если ничего не найдено, возвращается undefined.
  let users = [
    {id: 1, name: "Вася"},
    {id: 2, name: "Петя"},
    {id: 3, name: "Маша"}
  ];
  let user = users.find(item => item.id == 1);
  alert(user.name); // Вася
Метод arr.findIndex – по сути, то же самое, но возвращает индекс, на котором был найден элемент, а не сам элемент, и -1, если 
ничего не найдено.


filter
  let results = arr.filter(function(item, index, array) {
    // если true - элемент добавляется к результату, и перебор продолжается
    // возвращается пустой массив в случае, если ничего не найдено
  });
  
  let users = [
    {id: 1, name: "Вася"},
    {id: 2, name: "Петя"},
    {id: 3, name: "Маша"}
  ];
  // возвращает массив, состоящий из двух первых пользователей
  let someUsers = users.filter(item => item.id < 3);
  alert(someUsers.length); // 2
  
  
Преобразование массива
map - Он вызывает функцию для каждого элемента массива и возвращает массив результатов выполнения этой функции.
  let lengths = ["Bilbo", "Gandalf", "Nazgul"].map(item => item.length);
  alert(lengths); // 5,7,6

sort(fn) - Он возвращает отсортированный массив, но обычно возвращаемое значение игнорируется, так как изменяется сам arr

reverse - меняет порядок элементов в arr на обратный. arr.reverse();

split и join 
split - Он разбивает строку на массив по заданному разделителю
  let names = 'Вася, Петя, Маша';
  let arr = names.split(', ');
  for (let name of arr) {
    alert( `Сообщение получат: ${name}.` ); // Сообщение получат: Вася (и другие имена)
  }
  
  let arr = ['Вася', 'Петя', 'Маша'];
  let str = arr.join(';'); // объединить массив в строку через ;
  alert( str ); // Вася;Петя;Маша





Шпаргалка по методам массива:

Для добавления/удаления элементов:
push (...items) – добавляет элементы в конец,
pop() – извлекает элемент с конца,
shift() – извлекает элемент с начала,
unshift(...items) – добавляет элементы в начало.
splice(pos, deleteCount, ...items) – начиная с индекса pos, удаляет deleteCount элементов и вставляет items.
slice(start, end) – создаёт новый массив, копируя в него элементы с позиции start до end (не включая end).
concat(...items) – возвращает новый массив: копирует все члены текущего массива и добавляет к нему items. Если какой-то из items является массивом, тогда берутся его элементы.

Для поиска среди элементов:
indexOf/lastIndexOf(item, pos) – ищет item, начиная с позиции pos, и возвращает его индекс или -1, если ничего не найдено.
includes(value) – возвращает true, если в массиве имеется элемент value, в противном случае false.
find/filter(func) – фильтрует элементы через функцию и отдаёт первое/все значения, при прохождении которых через функцию возвращается true.
findIndex похож на find, но возвращает индекс вместо значения.

Для перебора элементов:
forEach(func) – вызывает func для каждого элемента. Ничего не возвращает.

Для преобразования массива:
map(func) – создаёт новый массив из результатов вызова func для каждого элемента.
sort(func) – сортирует массив «на месте», а потом возвращает его.
reverse() – «на месте» меняет порядок следования элементов на противоположный и возвращает изменённый массив.
split/join – преобразует строку в массив и обратно.
reduce(func, initial) – вычисляет одно значение на основе всего массива, вызывая func для каждого элемента и передавая промежуточный результат между вызовами.

Дополнительно:
Array.isArray(arr) проверяет, является ли arr массивом.
