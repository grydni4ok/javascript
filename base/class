В объектно-ориентированном программировании класс – это расширяемый шаблон кода для создания объектов, который устанавливает в 
них начальные значения (свойства) и реализацию поведения (методы).
class MyClass {
  // методы класса
  constructor() { ... }
  method1() { ... }
  method2() { ... }
  method3() { ... }
  ...
}


Наследование классов
Для того, чтобы наследовать класс от другого, мы должны использовать ключевое слово "extends" и указать название родительского 
класса перед {..}.
class Rabbit extends Animal {
  hide() {
    alert(`${this.name} прячется!`);
  }
}

Переопределение методов
обычно мы не хотим полностью заменить родительский метод, а скорее хотим сделать новый на его основе, изменяя или расширяя его 
функциональность. Мы делаем что-то в нашем методе и вызываем родительский метод до/после или в процессе.

У классов есть ключевое слово "super" для таких случаев.
super.method(...) вызывает родительский метод.
super(...) вызывает родительский конструктор (работает только внутри нашего конструктора).
```
class Animal {

  constructor(name) {
    this.speed = 0;
    this.name = name;
  }

  run(speed) {
    this.speed = speed;
    alert(`${this.name} бежит со скоростью ${this.speed}.`);
  }

  stop() {
    this.speed = 0;
    alert(`${this.name} стоит.`);
  }

}

class Rabbit extends Animal {
  hide() {
    alert(`${this.name} прячется!`);
  }

  stop() {
    super.stop(); // вызываем родительский метод stop
    this.hide(); // и затем hide
  }
}
```


